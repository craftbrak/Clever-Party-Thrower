# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

interface Node {
    createdAt: DateTime!
    id: ID!
    updatedAt: DateTime!
    version: Int!
}

type AuthLoginOutput {
    accessToken: String!
}

type Event {
    createdAt: DateTime!
    "Description of the event"
    description: String!
    id: ID!
    "Name of the event"
    name: String!
    "Total spent for the event"
    total: Float!
    updatedAt: DateTime!
    version: Int!
}

type EventsPagination {
    nodes: [Event!]!
    totalCount: Float!
}

type Mutation {
    authLogin(password: String!, username: String!): AuthLoginOutput!
    createEvent(createEventInput: CreateEventInput!): Event!
    createUser(createUserInput: CreateUserInput!): User!
    removeEvent(id: ID!): ID!
    removeUser(id: Int!): User!
    updateEvent(updateEventInput: UpdateEventInput!): Event!
    updateUser(updateUserInput: UpdateUserInput!): User!
}

type Query {
    event(id: ID!): Event!
    events(skip: Int!, sortBy: EventsPaginationSortBy, take: Int!): EventsPagination!
    sayHello: String!
    user(email: String!): User!
}

type User {
    avatar: String
    createdAt: DateTime!
    "Email of the user"
    email: String!
    id: ID!
    "Name of the user"
    name: String!
    updatedAt: DateTime!
    version: Int!
}

enum SortDirection {
    ASC
    DESC
}

"A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format."
scalar DateTime

input CreateEventInput {
    "Description of the event"
    description: String!
    "Name of the event"
    name: String!
    "Total spent for the event"
    total: Float!
}

input CreateUserInput {
    avatar: String
    "Email of the user"
    email: String!
    "Name of the user"
    name: String!
    "Password of the user"
    password: String!
}

input EventsPaginationSortBy {
    createdAt: SortDirection
    name: SortDirection
}

input UpdateEventInput {
    "Description of the event"
    description: String!
    "Id of the event"
    id: ID!
    "Name of the event"
    name: String!
    "Total spent for the event"
    total: Float!
}

input UpdateUserInput {
    avatar: String
    "Email of the user"
    email: String
    id: Int!
    "Name of the user"
    name: String
    "Password of the user"
    password: String
}
