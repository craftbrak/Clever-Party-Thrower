// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                @id @default(autoincrement())
  email             String             @unique
  name              String
  password          String
  drivingLicence    Boolean            @default(false)
  manual            Boolean            @default(false)
  verified          Boolean
  spotify           Boolean            @default(false)
  address           Address            @relation(fields: [addressId], references: [id])
  events            UsersOnEvents[]
  spendings         Spending[]
  shoppingListItems ShoppingListItem[]
  cars              Car[]
  addressId         Int
}

model Event {
  id           Int                @id @default(autoincrement())
  name         String
  total        Float
  address      Address            @relation(fields: [addressId], references: [id])
  participants UsersOnEvents[]
  playlist     Music[]
  shopingList  ShoppingListItem[]
  spendings    Spending[]
  addressId    Int
  createdAt    DateTime           @default(now())
}

model UsersOnEvents {
  user            User        @relation(fields: [userId], references: [id])
  userId          Int
  event           Event       @relation(fields: [eventId], references: [id])
  eventId         Int
  role            EventRole[]
  startingAddress Address     @relation(fields: [addressId], references: [id])
  addressId       Int

  @@id([userId, eventId])
}

model Spending {
  id                Int               @id @default(autoincrement())
  user              User              @relation(fields: [userId], references: [id])
  shoppinglistItem  ShoppingListItem? @relation(fields: [shopingListItemId], references: [id])
  name              String?
  value             Float
  Event             Event             @relation(fields: [eventId], references: [id])
  eventId           Int
  userId            Int
  shopingListItemId Int?
}

model ShoppingListItem {
  id       Int        @id @default(autoincrement())
  quantity String
  name     String
  price    Float
  user     User       @relation(fields: [userId], references: [id])
  bought   Boolean
  Event    Event?     @relation(fields: [eventId], references: [id])
  eventId  Int?
  Spending Spending[]
  userId   Int
}

model Music {
  id      Int     @id @default(autoincrement())
  url     String
  title   String?
  artist  String?
  album   String?
  Event   Event   @relation(fields: [eventId], references: [id])
  eventId Int
}

model Car {
  id            Int     @id @default(autoincrement())
  brand         String
  maxPassengers Int
  consumption   Float
  bootSize      Int
  electric      Boolean @default(false)
  manual        Boolean @default(false)
  range         Int     @default(-1)
  owner         User    @relation(fields: [userId], references: [id])
  userId        Int
}

model Address {
  id            Int             @id @default(autoincrement())
  country       String
  city          String
  postalCode    String
  street        String
  number        Int
  long          String
  lat           String
  User          User[]
  Event         Event[]
  UsersOnEvents UsersOnEvents[]
  @@unique([long,lat])
}

enum Role {
  USER
  ADMIN
}

enum EventRole {
  PARTICIPANT
  INVITE
  BOB
  HOST
  OWNER
  DJ
}
