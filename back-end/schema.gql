# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Country {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  name: String!
  code: String!
}

type Address {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  unitNumber: String
  streetNumber: String!
  line1: String!
  line2: String
  city: String!
  postalCode: String!
  country: Country!
  countryId: String!
}

type Car {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  brand: String!
  model: String!
  maxPassengers: Int!

  """consumption of the car in L/100km"""
  consumption: Float!
  bootSize: BootSizes!
  fuel: Fuels!
  manualTransmission: Boolean!

  """Range of the car in km"""
  range: Int!
  shared: Boolean!
  owner: User!
  ownerId: String!
}

enum BootSizes {
  None
  Small
  Medium
  Big
  CampingCar
}

enum Fuels {
  Electric
  Petrol
  Diesel
  LPG
  HYDROGEN
}

type User {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!

  """Name of the user"""
  name: String!

  """Email of the user"""
  email: String!
  avatar: String
  drivingLicence: Boolean!
  manual: Boolean!
  eventToUsers: [EventToUser!]!
  address: Address
  addressId: String
  cars: [Car!]!
}

type EventToUser {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
  userId: String!
  eventId: String!
  event: Event!
  user: User!
  address: Address
  addressId: String
  role: UserRole!
}

enum UserRole {
  OWNER
  MEMBER
  DJ
  INVITED
}

type Carpool {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!

  """Name of the event"""
  name: String!

  """Description of the event"""
  description: String!

  """Total spent for the event"""
  total: Float!
  members(skip: Int!, take: Int!, sortBy: EventsPaginationSortBy): [EventToUser!]
  address: Address
  addressId: String
  carpools: Carpool
}

input EventsPaginationSortBy {
  createdAt: SortDirection
  name: SortDirection
}

enum SortDirection {
  ASC
  DESC
}

type EventsPagination {
  totalCount: Float!
  nodes: [Event!]!
}

type AuthLoginOutput {
  accessToken: String!
}

type Spending {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

type Query {
  sayHello: String!
  getEvents(skip: Int!, take: Int!, sortBy: EventsPaginationSortBy): EventsPagination!
  event(id: ID!): Event!
  address(id: String!): Address!
  countries: [Country!]!
  country(Code: String!): Country!
  user(email: String!): User!
  eventToUser(id: String!): EventToUser!
  car(id: ID!): Car!
  carpool(id: String!): Carpool!
  spending(id: Int!): Spending!
}

type Mutation {
  createEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  removeEvent(id: ID!): ID!
  createAddress(createAddressInput: CreateAddressInput!): Address!
  updateAddress(updateAddressInput: UpdateAddressDto!): Address!
  removeAddress(id: Int!): Address!
  createCountry(CreateCountryInput: CreateCountryInput!): Country!
  authLogin(username: String!, password: String!): AuthLoginOutput!
  createUser(singUp: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!
  createEventToUser(createEventToUserInput: CreateEventToUserInput!): EventToUser!
  updateEventToUser(updateEventToUserInput: UpdateEventToUserInput!): EventToUser!
  removeEventToUser(id: String!): EventToUser!
  createCar(createCarInput: CreateCarInput!): Car!
  updateCar(updateCarInput: UpdateCarInput!): Car!
  removeCar(id: ID!): Car!
  createCarpool(createCarpoolInput: CreateCarpoolInput!): Carpool!
  updateCarpool(updateCarpoolInput: UpdateCarpoolInput!): Carpool!
  removeCarpool(id: String!): Carpool!
  createSpending(createSpendingInput: CreateSpendingInput!): Spending!
  updateSpending(updateSpendingInput: UpdateSpendingInput!): Spending!
  removeSpending(id: Int!): Spending!
}

input CreateEventInput {
  """Name of the event"""
  name: String!

  """Description of the event"""
  description: String!

  """Total spent for the event"""
  total: Float!
  addressId: String!
}

input UpdateEventInput {
  """Name of the event"""
  name: String!

  """Description of the event"""
  description: String!

  """Total spent for the event"""
  total: Float!
  addressId: String

  """Id of the event"""
  id: ID!
}

input CreateAddressInput {
  unitNumber: String
  streetNumber: String!
  line1: String!
  line2: String
  city: String!
  postalCode: String!
  countryId: String!
}

input UpdateAddressDto {
  unitNumber: String
  streetNumber: String!
  line1: String!
  line2: String
  city: String!
  postalCode: String!
  countryId: String!
  id: Int!
}

input CreateCountryInput {
  name: String!
  code: String!
}

input CreateUserInput {
  """Name of the user"""
  name: String!

  """Email of the user"""
  email: String!

  """Password of the user"""
  password: String!
  avatar: String
  drivingLicence: Boolean!
  manual: Boolean!
  addressId: String!
}

input UpdateUserInput {
  """Name of the user"""
  name: String

  """Email of the user"""
  email: String

  """Password of the user"""
  password: String
  avatar: String
  drivingLicence: Boolean
  manual: Boolean
  addressId: String
  id: String!
}

input CreateEventToUserInput {
  userId: String!
  eventId: String!
  addressId: String
}

input UpdateEventToUserInput {
  userId: String
  eventId: String
  addressId: String
  id: String!
}

input CreateCarInput {
  brand: String!
  model: String!
  maxPassengers: Int!

  """consumption of the car in L/100km"""
  consumption: Float!
  bootSize: BootSizes!
  fuel: Fuels!
  manualTransmission: Boolean!

  """Range of the car in km"""
  range: Int!
}

input UpdateCarInput {
  brand: String
  model: String
  maxPassengers: Int

  """consumption of the car in L/100km"""
  consumption: Float
  bootSize: BootSizes
  fuel: Fuels
  manualTransmission: Boolean

  """Range of the car in km"""
  range: Int
  id: ID!
}

input CreateCarpoolInput {
  """Example field (placeholder)"""
  totalLength: Int!
}

input UpdateCarpoolInput {
  """Example field (placeholder)"""
  totalLength: Int
  id: ID!
}

input CreateSpendingInput {
  """Example field (placeholder)"""
  exampleField: Int!
}

input UpdateSpendingInput {
  """Example field (placeholder)"""
  exampleField: Int
  id: Int!
}