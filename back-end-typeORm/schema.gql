# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

interface Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Event {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  version: Int!

  """Name of the event"""
  name: String!

  """Description of the event"""
  description: String!

  """Total spent for the event"""
  total: Float!
}

type EventsPagination {
  totalCount: Float!
  nodes: [Event!]!
}

type Query {
  sayHello: String!
  events(skip: Int!, take: Int!, sortBy: EventsPaginationSortBy): EventsPagination!
  event(id: ID!): Event!
}

input EventsPaginationSortBy {
  createdAt: SortDirection
  name: SortDirection
}

enum SortDirection {
  ASC
  DESC
}

type Mutation {
  createEvent(createEventInput: CreateEventInput!): Event!
  updateEvent(updateEventInput: UpdateEventInput!): Event!
  removeEvent(id: ID!): ID!
}

input CreateEventInput {
  """Name of the event"""
  name: String!

  """Description of the event"""
  description: String!

  """Total spent for the event"""
  total: Float!
}

input UpdateEventInput {
  """Name of the event"""
  name: String!

  """Description of the event"""
  description: String!

  """Total spent for the event"""
  total: Float!

  """Id of the event"""
  id: ID!
}